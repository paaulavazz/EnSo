

Documentación de Comandos de la práctica individual de GitHub.
Realizada por: Paula Vázquez Tella



Paso 1: Crear la estructura del repositorio local.

## 1. Crear el directorio RaizRepositorio:
mkdir RaizRepositorio

## 2. Cambiar al directorio RaizRepositorio:
cd RaizRepositorio

## 3. Crear los directorios Proyectos y Procesos:
mkdir Proyectos
mkdir Procesos

## 4. Cambiar al directorio Proyectos:
cd Proyectos

## 5. Crear el directorio Prj1:
mkdir Prj1

## 6. Volver al directorio RaizRepositorio:
cd ..

## 7. Cambiar al directorio Procesos:
cd Procesos

## 8. Crear el directorio ControlDeCambios:
mkdir ControlDeCambios



Paso 2: Crear la versión inicial del proceso de control de cambios junto a las plantillas en blanco.

## 1. Antes de proceder a incluir los archivos indicados, crearemos el archivo historia.txt en la raíz del repositorio con el objetivo de documentar los comandos empleados en el transcurso de la práctica:
touch historia.txt

## 2. Ahora, cambiamos al directorio ControlDeCambios y creamos el directorio destinado a guardar las plantillas:
cd .\Procesos\ControlDeCambios\
mkdir Plantillas

## 3. A continuación, añadimos la versión inicial de la descripción del proceso de control de cambios (v1) a ControlDeCambios y las pantillas a la carpeta Plantillas:



Paso 3: Actualizar el repositorio local.

## 1. Inicializamos un nuevo repositorio Git en el directorio actual, RaizRepositorio:
git init

## 2. Agregamos todos los archivos y cambios en el directorio de trabajo al área de preparación (staging area). Preparamos los archivos para el primer commit:
git add .

## 3. Hacemos un commit con los cambios que están en el área de preparación. Con el mensaje "V1 Proceso de control de cambios" explicamos el propósito del commit:
git commit -m "V1 Proceso de control de cambios"

## 4. Renombramos la rama principal de "master" a "main". GitHub ahora utiliza "main" como la rama principal por defecto:
git branch -M main

## 5. Establecemos una conexión remota llamada "origin" a la URL del repositorio en GitHub llamado EnSo:
git remote add origin https://github.com/paaulavazz/EnSo.git

## 6. Finalmente, con el siguiente comando, subimos (push) los cambios realizados en el repositorio local al repositorio remoto en GitHub:
git push -u origin main



Paso 4: Marcar este estado con la etiqueda "R1".

## 1. Creamos la etiqueta anotada "R1" usando '-a' e incluyendo un mensaje descriptivo con la opción '-m':
git tag -a R1 -m "Versión R1"

## 2. Empujamos la etiqueta al repositorio remoto:
git push origin --tags



Paso 5: Crear una rama denominada "Mejoras" e incluir el pdf con las propuestas de mejora en la carpeta de ControlDeCambios.

## 1. Creamos una nueva rama llamada "Mejoras" y cambiamos automáticamente a ella: 
git checkout -b Mejoras

## 2. Agregamos el archivo PDF con las propuestas de mejora:
git add Procesos/ControlDeCambios/DP_ControldeCambios_Grupo3-v1_1.pdf

## 3. Hacemos un comit indicando los cambios realizados:
git commit -m "Agregado pdf con propuestas de mejora"

## 4. Empujamos la rama "Mejoras" al repositorio remoto de GitHub, enviando tanto la nueva rama como sus cambios:
git push origin Mejoras



Paso 6: Modificar el documento de Word para que sea la versión V2.

## 1. Modificamos el word con los cambios que habían sido realizados en la versión 2 del proceso de control de cambios.

## 2. Agregamos el archivo modificado al área de preparación, indicando a Git que deseamos incluir estos cambios en el próximo commit:
git add /Procesos/ControlDeCambios/DP_ControldeCambios_Grupo3.docx

## 3. Realizamos un commit con los cambios realizados en el documento de Word, junto a un mensaje descriptivo:
git commit -m "V2 del Proceso de control de cambios"

## 4. Enviamos los cambios a la rama "Mejoras" en el repositorio remoto, actualizando así la versión remota del documento con la versión V2 del Proceso de control de cambios:
git push origin Mejoras



Paso 7: Fundir la rama "Mejoras" con la rama main para, posteriormente, eliminarla.

## 1. Nos cambiamos a la rama "main":
git checkout main

## 2. Fusionamos la rama "Mejoras" con la rama "main" aceptando automáticamente sus cambios:
git merge --strategy-option=theirs Mejoras

## 3. Realizamos un commit para confirmar la fusión:
git commit -m "Merge branch 'Mejoras' into main"

## 4. Eliminamos la rama "Mejoras" localmente:
git branch -d Mejoras

## 5. Eliminamos la rama "Mejoras" en el repositorio remoto:
git push origin --delete Mejoras



Paso 8: Borrar el pdf de las propuestas para que en el main solo quere la versión correcta del documento con la gestión del cambio (V2) y sus plantillas.

## 1. Eliminamos el archivo PDF con las propuestas de mejora (localmente):
git rm Procesos/ControlDeCambios/DP_ControldeCambios_Grupo3-v1_1.pdf

## 2. Realizamos un commit para confirmar la eliminación:
git commit -m "Eliminado PDF de Propuestas de Mejora"



Paso 9: Actualizar el repositorio y etiquetar la versión actual con la versión "R2".

## 1. Enviamos los cambios realizados, es decir, la eliminación del PDF, al repositorio remoto:
git push origin main

## 2. Etiquetamos la versión actual como "R2":
git tag -a R2 -m "Versión R2"

## 3. Enviamos la nueva etiqueta asociada al estado actual al repositorio remoto usando '--tags':
git push origin main --tags



Paso 10: Substituir la versión 2 del proceso por la versión 3 en la rama principal y actualizar el repositorio local.

## 1. Directamente desde la rama principal, reemplazamos el archivo con la versión 2 por el word que contiene la versión 3 del proceso de control de cambios.

## 2. Añadimos el cambio al área de preparación:
git add Procesos/ControlDeCambios/DP_ControldeCambios_Grupo3.docx

## 3. Realizamos un commit para confirmar el cambio:
git commit -m "V3 del Proceso de control de cambios"



Paso 11: Devolver la rama principal al estado anterior, actualizar con la versión 3 y sus plantillas y marcar con la etiqueta "R3".

## 1. Usaremos el siguiente comando para identificar el hash del commit anterior que deseamos revertir:
git log

## 2. Revertimos los cambios locales al estado anterior al commit identificado:
git reset --hard bb5606f807271de7b18ac5ca1ee9d8731aa7874e

## 3. Añadimos estos cambios al área de preparación:
git add -A

## 4. Realizamos un commit que indique que se han revertido los cambios:
git commit -m "Revertir cambios para incluir plantillas"

## 5. Ahora, añadimos directamente desde la rama principal, tal y como se nos indica, la V3 del proceso de control de cambios y las plantillas actualizadas:

## 6. Etiquetamos la versión actual como "R3":
git tag -a R3 -m "Versión R3"



Paso 12: Hacer push de la rama principal y los tags para actualizar el repositorio remoto de GitHub.

## 1. Push de la rama principal y los tags al repositorio de GitHub:
git push origin main --tags



Paso 13: Comprobar si la rama principal está actualizada.

## 1. Usamos el siguiente comando para traer los cambios recientes desde el repositorio remoto y aplicarlos en nuestro repositorio local:
git pull origin main



Paso 14: Comprobar las diferencias entre la versión de historia.txt del repositorio remoto y el local.

## 1. Con el siguiente comando comparamos el estado actual del archivo historia.txt con la versión de la rama "main" del repositorio remoto:
git diff origin/main historia.txt



Paso 15: Actualizar el repositorio remoto con todos los cambios:

## 1. Añadimos todos los cambios al área de preparación para ser incluidos en el próximo commit:
git add .

## 2. Ahora que los cambios están en el área de preparación, hacemos un nuevo commit con su respectivo mensaje descriptivo:
git commit -m "Todo actualizado"

## 3. Una vez hecho el commit local, enviamos los cambios al repositorio remoto:
git push origin main